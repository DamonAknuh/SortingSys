
Final_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000097e  00000a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080020a  0080020a  00000a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001abe  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001216  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc0  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  000046c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cf  00000000  00000000  00004ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080b  00000000  00000000  00005387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005b92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	51 c1       	rjmp	.+674    	; 0x2a8 <__vector_1>
   6:	00 00       	nop
   8:	60 c1       	rjmp	.+704    	; 0x2ca <__vector_2>
   a:	00 00       	nop
   c:	6d c1       	rjmp	.+730    	; 0x2e8 <__vector_3>
   e:	00 00       	nop
  10:	bf c1       	rjmp	.+894    	; 0x390 <__vector_4>
  12:	00 00       	nop
  14:	ce c1       	rjmp	.+924    	; 0x3b2 <__vector_5>
  16:	00 00       	nop
  18:	d6 c1       	rjmp	.+940    	; 0x3c6 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	b2 c1       	rjmp	.+868    	; 0x3da <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 31       	cpi	r26, 0x1D	; 29
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	43 d2       	rcall	.+1158   	; 0x5a6 <main>
 120:	2c c4       	rjmp	.+2136   	; 0x97a <_exit>

00000122 <__bad_interrupt>:
 122:	99 c1       	rjmp	.+818    	; 0x456 <__vector_default>

00000124 <IdleState>:


void IdleState()
{
#if ENABLE_DEBUG_BUILD
    PORTC = IDLE_STATE;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	88 b9       	out	0x08, r24	; 8
#endif // ENABLE_DEBUG_BUILD

    PORTB =  DC_MOTOR_CCW;
 128:	87 e0       	ldi	r24, 0x07	; 7
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	08 95       	ret

0000012e <InitState>:
}

void InitState()
{
#if ENABLE_DEBUG_BUILD
    PORTC = INIT_STATE;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	88 b9       	out	0x08, r24	; 8
#endif // ENABLE_DEBUG_BUILD

    // == > Initialize the tray on the starting position. 
    mTray_Init();
 132:	86 d2       	rcall	.+1292   	; 0x640 <mTray_Init>
    
    // == > Turn off Interrupt Associated with Hall Effect Sensor.
    EIMSK &= ~_BV(INT1);

    // todo: see if clearQ imp is good for null Qs
    ClearQueue();
 134:	e9 98       	cbi	0x1d, 1	; 29
 136:	14 c2       	rjmp	.+1064   	; 0x560 <ClearQueue>
 138:	08 95       	ret

0000013a <ClassifyState>:
}

void ClassifyState()
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	1f 92       	push	r1
 144:	1f 92       	push	r1
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
#if ENABLE_DEBUG_BUILD
    PORTC = CLASS_STATE;
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	88 b9       	out	0x08, r24	; 8
    mTim1_DelayMs(1000);
 14e:	68 ee       	ldi	r22, 0xE8	; 232
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ad d2       	rcall	.+1370   	; 0x6b2 <mTim1_DelayMs>
	PORTC = g_ADCMinResult;
 158:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <g_ADCMinResult>
 15c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <g_ADCMinResult+0x1>
 160:	88 b9       	out	0x08, r24	; 8
	mTim1_DelayMs(2000);
 162:	60 ed       	ldi	r22, 0xD0	; 208
 164:	77 e0       	ldi	r23, 0x07	; 7
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a3 d2       	rcall	.+1350   	; 0x6b2 <mTim1_DelayMs>
#endif // ENABLE_DEBUG_BUILD

    pNode_t currentNode;
    uint16_t shadowADCResult = g_ADCMinResult;
 16c:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <g_ADCMinResult>
 170:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <g_ADCMinResult+0x1>

    DequeueCurrentNode(&currentNode);
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	dc d1       	rcall	.+952    	; 0x532 <DequeueCurrentNode>
   
    if ( ALUM_TH_MAX >= shadowADCResult)
 17a:	0f 3f       	cpi	r16, 0xFF	; 255
 17c:	11 05       	cpc	r17, r1
 17e:	09 f0       	breq	.+2      	; 0x182 <ClassifyState+0x48>
 180:	38 f4       	brcc	.+14     	; 0x190 <ClassifyState+0x56>
    {
        currentNode->data.type = 0b01;
 182:	e9 81       	ldd	r30, Y+1	; 0x01
 184:	fa 81       	ldd	r31, Y+2	; 0x02
 186:	80 81       	ld	r24, Z
 188:	8c 7f       	andi	r24, 0xFC	; 252
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
 18e:	23 c0       	rjmp	.+70     	; 0x1d6 <ClassifyState+0x9c>
    }
    else if(STEEL_TH_MIN <= shadowADCResult && STEEL_TH_MAX >= shadowADCResult)
 190:	c8 01       	movw	r24, r16
 192:	80 59       	subi	r24, 0x90	; 144
 194:	91 40       	sbci	r25, 0x01	; 1
 196:	8d 32       	cpi	r24, 0x2D	; 45
 198:	91 40       	sbci	r25, 0x01	; 1
 19a:	30 f4       	brcc	.+12     	; 0x1a8 <ClassifyState+0x6e>
    {
        currentNode->data.type = 0b00;
 19c:	e9 81       	ldd	r30, Y+1	; 0x01
 19e:	fa 81       	ldd	r31, Y+2	; 0x02
 1a0:	80 81       	ld	r24, Z
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	80 83       	st	Z, r24
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <ClassifyState+0x9c>
    }
    else if(BLACK_TH_MIN <= shadowADCResult && BLACK_TH_MAX >= shadowADCResult)
 1a8:	c8 01       	movw	r24, r16
 1aa:	8c 5b       	subi	r24, 0xBC	; 188
 1ac:	93 40       	sbci	r25, 0x03	; 3
 1ae:	87 34       	cpi	r24, 0x47	; 71
 1b0:	91 05       	cpc	r25, r1
 1b2:	30 f4       	brcc	.+12     	; 0x1c0 <ClassifyState+0x86>
    {
        currentNode->data.type = 0b11;
 1b4:	e9 81       	ldd	r30, Y+1	; 0x01
 1b6:	fa 81       	ldd	r31, Y+2	; 0x02
 1b8:	80 81       	ld	r24, Z
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	80 83       	st	Z, r24
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <ClassifyState+0x9c>
    }
    else if(WHITE_TH_MIN <= shadowADCResult && WHITE_TH_MAX >= shadowADCResult)
 1c0:	04 58       	subi	r16, 0x84	; 132
 1c2:	13 40       	sbci	r17, 0x03	; 3
 1c4:	03 33       	cpi	r16, 0x33	; 51
 1c6:	11 05       	cpc	r17, r1
 1c8:	30 f4       	brcc	.+12     	; 0x1d6 <ClassifyState+0x9c>
    {
        currentNode->data.type = 0b10;
 1ca:	e9 81       	ldd	r30, Y+1	; 0x01
 1cc:	fa 81       	ldd	r31, Y+2	; 0x02
 1ce:	80 81       	ld	r24, Z
 1d0:	8c 7f       	andi	r24, 0xFC	; 252
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	80 83       	st	Z, r24
    }

    currentNode->data.stage = 0b01;
 1d6:	e9 81       	ldd	r30, Y+1	; 0x01
 1d8:	fa 81       	ldd	r31, Y+2	; 0x02
 1da:	80 81       	ld	r24, Z
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	80 83       	st	Z, r24

}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <NewObjState>:

void NewObjState()
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	1f 92       	push	r1
 1f6:	1f 92       	push	r1
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
#if ENABLE_DEBUG_BUILD
    PORTC = NEW_OBJ_STATE;
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	88 b9       	out	0x08, r24	; 8
    mTim1_DelayMs(100);
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	54 d2       	rcall	.+1192   	; 0x6b2 <mTim1_DelayMs>
#endif // ENABLE_DEBUG_BUILD
    pNode_t newNode; 

    InitNode(&newNode);
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	44 d1       	rcall	.+648    	; 0x498 <InitNode>

    EnqueueNode(&newNode);
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	53 d1       	rcall	.+678    	; 0x4bc <EnqueueNode>
}
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <PositionTrayState>:
    // need to call void mStepMotor(bool dirCW, uint32_t quadrants)

void PositionTrayState()
{
#if ENABLE_DEBUG_BUILD
    PORTC = POS_TRAY_HARD;
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	88 b9       	out	0x08, r24	; 8
    mTim1_DelayMs(100);
 224:	64 e6       	ldi	r22, 0x64	; 100
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	42 c2       	rjmp	.+1156   	; 0x6b2 <mTim1_DelayMs>
 22e:	08 95       	ret

00000230 <mGPIO_Init>:
void mGPIO_Init(void)
{

    // ========= SET PORT DIRECTIONS ============================
    // ==> Set PORT C to be output port.
    DDRC = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	87 b9       	out	0x07, r24	; 7
    
    // ==> Set PORT A to be output port. Currently using the top
    //        2 bits as debug LEDS. Rest of the bits used
    //        for stepper motor controll
    DDRA = 0xCF;
 234:	9f ec       	ldi	r25, 0xCF	; 207
 236:	91 b9       	out	0x01, r25	; 1
    
    // ==>    Set PWM Port PB7 to be output, bottom nibble used for
    //        DC motor controller
    DDRB = 0xFF;
 238:	84 b9       	out	0x04, r24	; 4

    // ==>    Set PF1 to input for 10-bit ADC conversions
    DDRF = 0b00000000;
 23a:	10 ba       	out	0x10, r1	; 16

    // ==>    Set DDRD as Input port. Used for input interrupts for
    //        all the sensors. 
    DDRD = 0b11110000;
 23c:	80 ef       	ldi	r24, 0xF0	; 240
 23e:	8a b9       	out	0x0a, r24	; 10

    // ==>    Set DDRE as Input port. Used for input interrupts for
    //        the system pause and system ramp buttons. 
    DDRE = 0b00110000;
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	8d b9       	out	0x0d, r24	; 13

    // ========= CONFIGURE INTERRUPTS ============================
    // == > Set INT0 (PORT D.0) to be interrupt on falling edge
    EICRA |= _BV(ISC01);
 244:	e9 e6       	ldi	r30, 0x69	; 105
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
    // == > Set INT1 (PORT D.1) to be interrupt on falling edge
    EICRA |= _BV(ISC11);
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	80 83       	st	Z, r24
    // == > Set INT2 (PORT D.2) to be interrupt on any edge change. 
    EICRA |= _BV(ISC20);
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
    // == > Set INT3 (PORT D.3) to be interrupt on falling edge
    EICRA |= _BV(ISC31);
 25a:	80 81       	ld	r24, Z
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	80 83       	st	Z, r24
    // == > Set INT4 (PORT E.3) to be interrupt on falling edge
    EICRB |= _BV(ISC41);
 260:	ea e6       	ldi	r30, 0x6A	; 106
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
    // == > Set INT5 (PORT E.4) to be interrupt on falling edge
    EICRB |= _BV(ISC51);
 26a:	80 81       	ld	r24, Z
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	80 83       	st	Z, r24
    
    // == > Enable INT 0-5, on PD[0-3], and PE[4,5]
    EIMSK |= _BV(INT0) | _BV(INT1) | _BV(INT2) | _BV(INT3) | _BV(INT4) | _BV(INT5);
 270:	8d b3       	in	r24, 0x1d	; 29
 272:	8f 63       	ori	r24, 0x3F	; 63
 274:	8d bb       	out	0x1d, r24	; 29
 276:	08 95       	ret

00000278 <mADC1_Init>:

void mADC1_Init(void)
{
    
    // Todo: ramp down ADC clock. 
    g_RefOBjectAtSensor = 0; 
 278:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_RefOBjectAtSensor>
    
    // == > Config ADC (Analog input ADC1 / PORTF1)
    ADCSRA |= _BV(ADEN);        // ==> Enable ADC
 27c:	ea e7       	ldi	r30, 0x7A	; 122
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 68       	ori	r24, 0x80	; 128
 284:	80 83       	st	Z, r24
    
    // == > ADC Multiplexer Selection Register
    //            ADLAR: Left adjust the ADC result in the register = 0. 
    //            REFS0: Set ADC voltage reference to ext cap. at AREF pin
    //            MUX0:  Set to use ADC1 input channell
    ADMUX  |= _BV(REFS0) | _BV(MUX0);
 286:	ac e7       	ldi	r26, 0x7C	; 124
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	8c 91       	ld	r24, X
 28c:	81 64       	ori	r24, 0x41	; 65
 28e:	8c 93       	st	X, r24

    // == > Perform First ADC conversion. This will take 25 cycles, and initializes the
    //			ADC for the rest of the program.
    ADCSRA |= _BV(ADSC);
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
    
	// == > Wait for first ADC conversion to completes
    while ((ADCSRA & _BV(ADIF)) == 0x00);
 296:	80 81       	ld	r24, Z
 298:	84 ff       	sbrs	r24, 4
 29a:	fd cf       	rjmp	.-6      	; 0x296 <mADC1_Init+0x1e>
	
    ADCSRA |= _BV(ADIE);	// ==> EN ADC interrupt
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 60       	ori	r24, 0x08	; 8
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret

000002a8 <__vector_1>:
**
***********************************************************************/

// == > OI sensor: Optical sensor for first object detection. (Active Low)
ISR(INT0_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
    TRIGGER_STATE(NEW_OBJ_STATE);
 2b4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 2b8:	84 60       	ori	r24, 0x04	; 4
 2ba:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>
}
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_2>:

// == > HE sensor: Hall Effect sensor for homing tray (Active Low)
ISR(INT1_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
    // == > Trigger the stepper motor to stop when homed.  
    g_HomingFlag = 1; 
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <g_HomingFlag>

}
 2dc:	8f 91       	pop	r24
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_3>:

// == > OR sensor: Optical sensor for detecting object at ADC conversion (Active Hi)
ISR(INT2_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	0b b6       	in	r0, 0x3b	; 59
 2f4:	0f 92       	push	r0
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
    if ((PIND & OR_SENSOR_PIN)== OR_SENSOR_PIN) // == > if sensor triggered : Object sighted. 
 30e:	4a 9b       	sbis	0x09, 2	; 9
 310:	16 c0       	rjmp	.+44     	; 0x33e <__vector_3+0x56>
    {
		PORTC = 0xF0;
 312:	80 ef       	ldi	r24, 0xF0	; 240
 314:	88 b9       	out	0x08, r24	; 8
		mTim1_DelayMs(100);
 316:	64 e6       	ldi	r22, 0x64	; 100
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	c9 d1       	rcall	.+914    	; 0x6b2 <mTim1_DelayMs>
		
		// == > Set Global bool for object at sensor to be true
        g_RefOBjectAtSensor = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <g_RefOBjectAtSensor>
        
        // == > Reset the ADC Sampling 
        g_ADCSample = 0xFFFF; 
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <g_ADCSample+0x1>
 32e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <g_ADCSample>
		
		// == > Trigger ADC Sampling.
		ADCSRA |= _BV(ADSC);
 332:	ea e7       	ldi	r30, 0x7A	; 122
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	80 83       	st	Z, r24
 33c:	16 c0       	rjmp	.+44     	; 0x36a <__vector_3+0x82>
    }
    else  // == > Sensor not asserted: Object passed. 
    {
		PORTC = 0x0F;
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	88 b9       	out	0x08, r24	; 8
		mTim1_DelayMs(100);
 342:	64 e6       	ldi	r22, 0x64	; 100
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	b3 d1       	rcall	.+870    	; 0x6b2 <mTim1_DelayMs>
		
		// == > Set Global bool for object at sensor to be false
		g_RefOBjectAtSensor = 0;
 34c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_RefOBjectAtSensor>

        // Save the old ADC result
        g_ADCMinResult = g_ADCSample;
 350:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <g_ADCSample>
 354:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <g_ADCSample+0x1>
 358:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <g_ADCMinResult+0x1>
 35c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <g_ADCMinResult>

        // == > ADC Sampling Complete: State = CLASS_STATE
        TRIGGER_STATE(CLASS_STATE);
 360:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 364:	80 68       	ori	r24, 0x80	; 128
 366:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>
    }
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0b be       	out	0x3b, r0	; 59
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_4>:

// == > EX sensor: Optical sensor positioned at end of the conveyor belt (Active Low)
ISR(INT3_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
    TRIGGER_STATE(POS_TRAY_HARD);
 39c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 3a0:	80 62       	ori	r24, 0x20	; 32
 3a2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>
}
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <__vector_5>:

// == > System Pause Button: Pause system (Active Low)
ISR(INT4_vect)
{
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
    //TRIGGER_STATE();
    // todo: or call void function.
}
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_6>:

// == > System Ramp Button:  (Active Low)
ISR(INT5_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
    // Todo: SYSTEM RAMP BUTTON> 


}
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_29>:

// == > ADC COMPL: Interrupt executed when ADC is done.
ISR(ADC_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	0f 92       	push	r0
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	uint16_t ADCLow  = ADCL;
 3f8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	uint16_t ADCHigh = ADCH;
 3fc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	uint16_t result = (ADCHigh << 8) | (ADCLow); 
 400:	82 2f       	mov	r24, r18
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	93 2b       	or	r25, r19
	
	g_ADCSample = MIN(g_ADCSample, result);
 406:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <g_ADCSample>
 40a:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <g_ADCSample+0x1>
 40e:	84 17       	cp	r24, r20
 410:	95 07       	cpc	r25, r21
 412:	20 f0       	brcs	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <g_ADCSample>
 418:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <g_ADCSample+0x1>
 41c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <g_ADCSample+0x1>
 420:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <g_ADCSample>
	
	PORTC = ADCLow;
 424:	28 b9       	out	0x08, r18	; 8
	
	if (g_RefOBjectAtSensor)
 426:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <g_RefOBjectAtSensor>
 42a:	88 23       	and	r24, r24
 42c:	29 f0       	breq	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		ADCSRA |= _BV(ADSC);
 42e:	ea e7       	ldi	r30, 0x7A	; 122
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	80 64       	ori	r24, 0x40	; 64
 436:	80 83       	st	Z, r24
	}

}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0b be       	out	0x3b, r0	; 59
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_default>:


ISR(BADISR_vect)
{
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
    PORTB = 0x00;
 460:	15 b8       	out	0x05, r1	; 5
    PORTC = 0XFF;
 462:	cf ef       	ldi	r28, 0xFF	; 255
 464:	c8 b9       	out	0x08, r28	; 8
	mTim1_DelayMs(1000);
 466:	68 ee       	ldi	r22, 0xE8	; 232
 468:	73 e0       	ldi	r23, 0x03	; 3
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	21 d1       	rcall	.+578    	; 0x6b2 <mTim1_DelayMs>
	PORTC = 0x00;
 470:	18 b8       	out	0x08, r1	; 8
	mTim1_DelayMs(500);
 472:	64 ef       	ldi	r22, 0xF4	; 244
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	1b d1       	rcall	.+566    	; 0x6b2 <mTim1_DelayMs>
	PORTC = 0XFF;
 47c:	c8 b9       	out	0x08, r28	; 8
	mTim1_DelayMs(1000);
 47e:	68 ee       	ldi	r22, 0xE8	; 232
 480:	73 e0       	ldi	r23, 0x03	; 3
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	15 d1       	rcall	.+554    	; 0x6b2 <mTim1_DelayMs>
	PORTC = 0x00;
 488:	18 b8       	out	0x08, r1	; 8
	mTim1_DelayMs(500);
 48a:	64 ef       	ldi	r22, 0xF4	; 244
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0f d1       	rcall	.+542    	; 0x6b2 <mTim1_DelayMs>

	PORTC = 0XFF;
 494:	c8 b9       	out	0x08, r28	; 8
 496:	ff cf       	rjmp	.-2      	; 0x496 <__vector_default+0x40>

00000498 <InitNode>:
uint8_t GetFirstNodeValue(void)
{
    ASSERT(NULL != s_LinkedList.lHead);
    
    return s_LinkedList.lHead->data.bits;
}
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	46 d1       	rcall	.+652    	; 0x730 <malloc>
 4a4:	99 83       	std	Y+1, r25	; 0x01
 4a6:	88 83       	st	Y, r24
 4a8:	cd 2b       	or	r28, r29
 4aa:	09 f4       	brne	.+2      	; 0x4ae <InitNode+0x16>
 4ac:	62 d2       	rcall	.+1220   	; 0x972 <abort>
 4ae:	fc 01       	movw	r30, r24
 4b0:	10 82       	st	Z, r1
 4b2:	12 82       	std	Z+2, r1	; 0x02
 4b4:	11 82       	std	Z+1, r1	; 0x01
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <EnqueueNode>:
 4bc:	fc 01       	movw	r30, r24
 4be:	89 2b       	or	r24, r25
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <EnqueueNode+0x8>
 4c2:	57 d2       	rcall	.+1198   	; 0x972 <abort>
 4c4:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <__data_end+0x5>
 4c8:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <__data_end+0x6>
 4cc:	10 97       	sbiw	r26, 0x00	; 0
 4ce:	31 f0       	breq	.+12     	; 0x4dc <EnqueueNode+0x20>
 4d0:	80 81       	ld	r24, Z
 4d2:	91 81       	ldd	r25, Z+1	; 0x01
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	9c 93       	st	X, r25
 4d8:	8e 93       	st	-X, r24
 4da:	11 97       	sbiw	r26, 0x01	; 1
 4dc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <__data_end+0x1>
 4e0:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <__data_end+0x2>
 4e4:	89 2b       	or	r24, r25
 4e6:	69 f4       	brne	.+26     	; 0x502 <EnqueueNode+0x46>
 4e8:	80 81       	ld	r24, Z
 4ea:	91 81       	ldd	r25, Z+1	; 0x01
 4ec:	aa e0       	ldi	r26, 0x0A	; 10
 4ee:	b2 e0       	ldi	r27, 0x02	; 2
 4f0:	12 96       	adiw	r26, 0x02	; 2
 4f2:	9c 93       	st	X, r25
 4f4:	8e 93       	st	-X, r24
 4f6:	11 97       	sbiw	r26, 0x01	; 1
 4f8:	14 96       	adiw	r26, 0x04	; 4
 4fa:	9c 93       	st	X, r25
 4fc:	8e 93       	st	-X, r24
 4fe:	13 97       	sbiw	r26, 0x03	; 3
 500:	0c c0       	rjmp	.+24     	; 0x51a <EnqueueNode+0x5e>
 502:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__data_end+0x3>
 506:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end+0x4>
 50a:	89 2b       	or	r24, r25
 50c:	31 f4       	brne	.+12     	; 0x51a <EnqueueNode+0x5e>
 50e:	80 81       	ld	r24, Z
 510:	91 81       	ldd	r25, Z+1	; 0x01
 512:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__data_end+0x4>
 516:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__data_end+0x3>
 51a:	aa e0       	ldi	r26, 0x0A	; 10
 51c:	b2 e0       	ldi	r27, 0x02	; 2
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	16 96       	adiw	r26, 0x06	; 6
 524:	9c 93       	st	X, r25
 526:	8e 93       	st	-X, r24
 528:	15 97       	sbiw	r26, 0x05	; 5
 52a:	8c 91       	ld	r24, X
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	8c 93       	st	X, r24
 530:	08 95       	ret

00000532 <DequeueCurrentNode>:
 532:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <__data_end+0x5>
 536:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <__data_end+0x6>
 53a:	23 2b       	or	r18, r19
 53c:	09 f4       	brne	.+2      	; 0x540 <DequeueCurrentNode+0xe>
 53e:	19 d2       	rcall	.+1074   	; 0x972 <abort>
 540:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <__data_end+0x3>
 544:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <__data_end+0x4>
 548:	dc 01       	movw	r26, r24
 54a:	ed 93       	st	X+, r30
 54c:	fc 93       	st	X, r31
 54e:	30 97       	sbiw	r30, 0x00	; 0
 550:	31 f0       	breq	.+12     	; 0x55e <DequeueCurrentNode+0x2c>
 552:	81 81       	ldd	r24, Z+1	; 0x01
 554:	92 81       	ldd	r25, Z+2	; 0x02
 556:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__data_end+0x4>
 55a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__data_end+0x3>
 55e:	08 95       	ret

00000560 <ClearQueue>:
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: None
*/
/* This clears the queue */
void ClearQueue(void)
{   
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
    pNode_t tempNode;
    
    while (NULL != s_LinkedList.lHead)
 568:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <__data_end+0x1>
 56c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <__data_end+0x2>
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	69 f0       	breq	.+26     	; 0x58e <ClearQueue+0x2e>
    {
        tempNode = s_LinkedList.lHead;
        s_LinkedList.lHead = tempNode->next;
 574:	0a e0       	ldi	r16, 0x0A	; 10
 576:	12 e0       	ldi	r17, 0x02	; 2
 578:	fc 01       	movw	r30, r24
 57a:	d1 81       	ldd	r29, Z+1	; 0x01
 57c:	c2 81       	ldd	r28, Z+2	; 0x02
 57e:	f8 01       	movw	r30, r16
 580:	d1 83       	std	Z+1, r29	; 0x01
 582:	c2 83       	std	Z+2, r28	; 0x02
        free(tempNode);
 584:	6d d1       	rcall	.+730    	; 0x860 <free>
/* This clears the queue */
void ClearQueue(void)
{   
    pNode_t tempNode;
    
    while (NULL != s_LinkedList.lHead)
 586:	8d 2f       	mov	r24, r29
 588:	9c 2f       	mov	r25, r28
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	a9 f7       	brne	.-22     	; 0x578 <ClearQueue+0x18>
        s_LinkedList.lHead = tempNode->next;
        free(tempNode);
    }
    
    /* Last but not least set the tail to NULL */
    s_LinkedList.lTail = NULL;
 58e:	ea e0       	ldi	r30, 0x0A	; 10
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	16 82       	std	Z+6, r1	; 0x06
 594:	15 82       	std	Z+5, r1	; 0x05
    s_LinkedList.lCurr = NULL;
 596:	14 82       	std	Z+4, r1	; 0x04
 598:	13 82       	std	Z+3, r1	; 0x03
    s_LinkedList.count = 0;    
 59a:	10 82       	st	Z, r1
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <main>:
{
    // ________________________________________________________
    // == > ~~ SYSTEM INITIALIZATION ~~~~~~~~~~~~~~~~~~~~~~~~~~
    // ==> Bit 7 must be changed to 1 to enable the
    //       change of CLK Pre-scalar bits
    CLKPR = _BV(CLKPCE);
 5a6:	e1 e6       	ldi	r30, 0x61	; 97
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 e8       	ldi	r24, 0x80	; 128
 5ac:	80 83       	st	Z, r24

    // == > Required to set CPU clock to 8 MHz
    CLKPR = 0x01;
 5ae:	c1 e0       	ldi	r28, 0x01	; 1
 5b0:	c0 83       	st	Z, r28

    // == > Disable all system Interrupts
    cli();
 5b2:	f8 94       	cli

    // == > Initialize CNT timer 1 used for busy waits
    // todo: might want to change timer to correct usage. 
    mTim1_Init();
 5b4:	ab d0       	rcall	.+342    	; 0x70c <mTim1_Init>
    mTim1_DelayMs(10);
 5b6:	6a e0       	ldi	r22, 0x0A	; 10
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0

    // == > Initialize the PWM timer
    mTim0PWM_Init();
 5be:	79 d0       	rcall	.+242    	; 0x6b2 <mTim1_DelayMs>

    // == > Initialize the GPIO used by the project
    // todo: change to correct GPIO
    // todo: setup all interrupts
    mGPIO_Init();
 5c0:	ab d0       	rcall	.+342    	; 0x718 <mTim0PWM_Init>
 5c2:	36 de       	rcall	.-916    	; 0x230 <mGPIO_Init>

    // == > Initialize the ADC used by the project
    // todo: change to ADC1 10-bit 
    mADC1_Init();
 5c4:	59 de       	rcall	.-846    	; 0x278 <mADC1_Init>
 5c6:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <g_CurrentState>

    // == > Set Current State to INIT STATE for 
    g_CurrentState = INIT_STATE;
 5ca:	78 94       	sei

    // == > Enable SW interrupts
    sei();
 5cc:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
    // == > ~~ KERNEL LOOP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    uint8_t shadowState;

    while (1)
    {
        shadowState = g_CurrentState;
 5d0:	18 b8       	out	0x08, r1	; 8
#if ENABLE_DEBUG_BUILD
        PORTC = 0;
 5d2:	88 23       	and	r24, r24
#endif // ENABLE_DEBUG_BUILD
        if (shadowState & CLASS_STATE)
 5d4:	3c f4       	brge	.+14     	; 0x5e4 <main+0x3e>
 5d6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
        {
            // == > Classifying the Object. Deassert the State
            PROCESS_STATE(CLASS_STATE);
 5da:	8f 77       	andi	r24, 0x7F	; 127
 5dc:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>

            ClassifyState();
 5e0:	ac dd       	rcall	.-1192   	; 0x13a <ClassifyState>
 5e2:	f4 cf       	rjmp	.-24     	; 0x5cc <main+0x26>
 5e4:	82 ff       	sbrs	r24, 2
        }
        else if (shadowState & NEW_OBJ_STATE)
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <main+0x50>
        {
            // == > Processed new object deassert object
            PROCESS_STATE(NEW_OBJ_STATE);
 5e8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 5ec:	8b 7f       	andi	r24, 0xFB	; 251
 5ee:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>

            NewObjState();
 5f2:	fe dd       	rcall	.-1028   	; 0x1f0 <NewObjState>
 5f4:	eb cf       	rjmp	.-42     	; 0x5cc <main+0x26>
 5f6:	85 ff       	sbrs	r24, 5
        }
        else if (shadowState & POS_TRAY_HARD)
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <main+0x6c>
        {
            PROCESS_STATE(POS_TRAY_HARD);
 5fa:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 5fe:	8f 7d       	andi	r24, 0xDF	; 223
 600:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>

            PositionTrayState();
 604:	0d de       	rcall	.-998    	; 0x220 <PositionTrayState>
 606:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
            

            TRIGGER_STATE(IDLE_STATE);
 60a:	82 60       	ori	r24, 0x02	; 2
 60c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>
 610:	dd cf       	rjmp	.-70     	; 0x5cc <main+0x26>
        }
        else if (shadowState & INIT_STATE)
 612:	80 ff       	sbrs	r24, 0
 614:	0c c0       	rjmp	.+24     	; 0x62e <main+0x88>
        {
            // == > Initialized System deassert object
            PROCESS_STATE(INIT_STATE);
 616:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>

            InitState();
 620:	86 dd       	rcall	.-1268   	; 0x12e <InitState>
 622:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>

            TRIGGER_STATE(IDLE_STATE);
 626:	82 60       	ori	r24, 0x02	; 2
 628:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>
 62c:	cf cf       	rjmp	.-98     	; 0x5cc <main+0x26>
        }
        else if (shadowState & IDLE_STATE)
 62e:	81 ff       	sbrs	r24, 1
 630:	cd cf       	rjmp	.-102    	; 0x5cc <main+0x26>
        {
            PROCESS_STATE(IDLE_STATE);
 632:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <g_CurrentState>
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <g_CurrentState>

            IdleState();
 63c:	73 dd       	rcall	.-1306   	; 0x124 <IdleState>
 63e:	c6 cf       	rjmp	.-116    	; 0x5cc <main+0x26>

00000640 <mTray_Init>:
 640:	cf 92       	push	r12

}


void mTray_Init(void)
{
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
    uint32_t i;

    for (i = 0; !g_HomingFlag; i++)
 648:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <g_HomingFlag>
 64c:	81 11       	cpse	r24, r1
 64e:	25 c0       	rjmp	.+74     	; 0x69a <mTray_Init+0x5a>
 650:	c1 2c       	mov	r12, r1
 652:	d1 2c       	mov	r13, r1
 654:	76 01       	movw	r14, r12
    {
        // the steps in the step table (1,2,3,4,1,2...) to turn motor CW
        PORTA = motorStepTable_g[(s_CurrentMotorStep + i) % SIZEOF_MOTOR_TABLE];
 656:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <s_CurrentMotorStep>
 65a:	a7 01       	movw	r20, r14
 65c:	96 01       	movw	r18, r12
 65e:	28 0f       	add	r18, r24
 660:	31 1d       	adc	r19, r1
 662:	41 1d       	adc	r20, r1
 664:	51 1d       	adc	r21, r1
 666:	da 01       	movw	r26, r20
 668:	c9 01       	movw	r24, r18
 66a:	83 70       	andi	r24, 0x03	; 3
 66c:	99 27       	eor	r25, r25
 66e:	aa 27       	eor	r26, r26
 670:	bb 27       	eor	r27, r27
 672:	fc 01       	movw	r30, r24
 674:	ea 5f       	subi	r30, 0xFA	; 250
 676:	fd 4f       	sbci	r31, 0xFD	; 253
 678:	80 81       	ld	r24, Z
 67a:	82 b9       	out	0x02, r24	; 2
        
        mTim1_DelayMs(MOTOR_START_DELAY_MS);
 67c:	64 e1       	ldi	r22, 0x14	; 20
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	16 d0       	rcall	.+44     	; 0x6b2 <mTim1_DelayMs>

void mTray_Init(void)
{
    uint32_t i;

    for (i = 0; !g_HomingFlag; i++)
 686:	3f ef       	ldi	r19, 0xFF	; 255
 688:	c3 1a       	sub	r12, r19
 68a:	d3 0a       	sbc	r13, r19
 68c:	e3 0a       	sbc	r14, r19
 68e:	f3 0a       	sbc	r15, r19
 690:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <g_HomingFlag>
 694:	88 23       	and	r24, r24
 696:	f9 f2       	breq	.-66     	; 0x656 <mTray_Init+0x16>
 698:	03 c0       	rjmp	.+6      	; 0x6a0 <mTray_Init+0x60>
 69a:	c1 2c       	mov	r12, r1
 69c:	d1 2c       	mov	r13, r1
 69e:	76 01       	movw	r14, r12
        PORTA = motorStepTable_g[(s_CurrentMotorStep + i) % SIZEOF_MOTOR_TABLE];
        
        mTim1_DelayMs(MOTOR_START_DELAY_MS);
    }

    s_CurrentMotorStep = (i % 4);
 6a0:	8c 2d       	mov	r24, r12
 6a2:	83 70       	andi	r24, 0x03	; 3
 6a4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <s_CurrentMotorStep>

}
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	df 90       	pop	r13
 6ae:	cf 90       	pop	r12
 6b0:	08 95       	ret

000006b2 <mTim1_DelayMs>:
// ______________________________________________________
//			TIMER FUNCTIONS
// ______________________________________________________

void mTim1_DelayMs(uint32_t count)
{
 6b2:	ab 01       	movw	r20, r22
 6b4:	bc 01       	movw	r22, r24
	uint32_t index = 0;
	
	// == > Sets waveform Generation Bit Mode to PWM,
	//		CTC mode for count up (mode 4)
	//		TCCR = Timer Counter Control Register 1 B
	TCCR1B |= _BV(WGM12);
 6b6:	e1 e8       	ldi	r30, 0x81	; 129
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	88 60       	ori	r24, 0x08	; 8
 6be:	80 83       	st	Z, r24
	
	// == > Set Output Compare Register = 1000 cycles = 1ms = 0x03E8
	//		Value is continuous compared with counter value
	//		Match generates an Output compare interrupt.
	OCR1A = 0x03E8;
 6c0:	88 ee       	ldi	r24, 0xE8	; 232
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 6c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	
	// == > Set Timer Counter Initial Value = 0x0000
	TCNT1 &= 0x0;
 6cc:	e4 e8       	ldi	r30, 0x84	; 132
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	91 81       	ldd	r25, Z+1	; 0x01
 6d4:	11 82       	std	Z+1, r1	; 0x01
 6d6:	10 82       	st	Z, r1
	
	// == > Timer Interrupt Flag Register:
	//		OCF01 is cleared when writing the following statement.
	//		Needs SW as flag is HW controlled, and needs SW toggle
	TIFR1 |= ( 1 << OCF1A);
 6d8:	b1 9a       	sbi	0x16, 1	; 22
//			TIMER FUNCTIONS
// ______________________________________________________

void mTim1_DelayMs(uint32_t count)
{
	uint32_t index = 0;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	dc 01       	movw	r26, r24
	//		OCF01 is cleared when writing the following statement.
	//		Needs SW as flag is HW controlled, and needs SW toggle
	TIFR1 |= ( 1 << OCF1A);
	
	// == > Poll the timer to determine when the timer is 1000mS
	while ( index < count )
 6e0:	0c c0       	rjmp	.+24     	; 0x6fa <mTim1_DelayMs+0x48>
	{
		
		
		// == > Bit 2 set when TCNT1 = OCR1A (Output Compare Register)
		if ( TIFR1 & 0x02 )
 6e2:	b1 99       	sbic	0x16, 1	; 22
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <mTim1_DelayMs+0x40>
	//		OCF01 is cleared when writing the following statement.
	//		Needs SW as flag is HW controlled, and needs SW toggle
	TIFR1 |= ( 1 << OCF1A);
	
	// == > Poll the timer to determine when the timer is 1000mS
	while ( index < count )
 6e6:	84 17       	cp	r24, r20
 6e8:	95 07       	cpc	r25, r21
 6ea:	a6 07       	cpc	r26, r22
 6ec:	b7 07       	cpc	r27, r23
 6ee:	c8 f3       	brcs	.-14     	; 0x6e2 <mTim1_DelayMs+0x30>
 6f0:	08 95       	ret
		
		
		// == > Bit 2 set when TCNT1 = OCR1A (Output Compare Register)
		if ( TIFR1 & 0x02 )
		{
			TIFR1 |= ( 1 << OCF1A);
 6f2:	b1 9a       	sbi	0x16, 1	; 22
			index++;
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	a1 1d       	adc	r26, r1
 6f8:	b1 1d       	adc	r27, r1
	//		OCF01 is cleared when writing the following statement.
	//		Needs SW as flag is HW controlled, and needs SW toggle
	TIFR1 |= ( 1 << OCF1A);
	
	// == > Poll the timer to determine when the timer is 1000mS
	while ( index < count )
 6fa:	48 17       	cp	r20, r24
 6fc:	59 07       	cpc	r21, r25
 6fe:	6a 07       	cpc	r22, r26
 700:	7b 07       	cpc	r23, r27
 702:	19 f0       	breq	.+6      	; 0x70a <mTim1_DelayMs+0x58>
	{
		
		
		// == > Bit 2 set when TCNT1 = OCR1A (Output Compare Register)
		if ( TIFR1 & 0x02 )
 704:	b1 9b       	sbis	0x16, 1	; 22
 706:	ed cf       	rjmp	.-38     	; 0x6e2 <mTim1_DelayMs+0x30>
 708:	f4 cf       	rjmp	.-24     	; 0x6f2 <mTim1_DelayMs+0x40>
 70a:	08 95       	ret

0000070c <mTim1_Init>:
void mTim1_Init()
{
	// == > Set pre-scalar to 8 in B timer control register
	// Need to transfer line to next file
	// Timer Counter Control Register
	TCCR1B |= _BV(CS11);
 70c:	e1 e8       	ldi	r30, 0x81	; 129
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	82 60       	ori	r24, 0x02	; 2
 714:	80 83       	st	Z, r24
 716:	08 95       	ret

00000718 <mTim0PWM_Init>:
}


void mTim0PWM_Init()
{
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));
 718:	84 b5       	in	r24, 0x24	; 36
 71a:	83 60       	ori	r24, 0x03	; 3
 71c:	84 bd       	out	0x24, r24	; 36
	
	// Set the compare match output mode  to clear (change to 0) on a compare match +
	// set the output compare A (change to 1) when the timer reaches TOP
	// (the value of the timer that you wanted to match the output compare A register to) (Hint, we are using Fast PWM mode).
	TCCR0A |= _BV(COM0A1); // COM0A0 == 0
 71e:	84 b5       	in	r24, 0x24	; 36
 720:	80 68       	ori	r24, 0x80	; 128
 722:	84 bd       	out	0x24, r24	; 36
	
	// Set the Clock Select bits (clock pre-scaler) in the Timer/Counter Control
	// Register B (pg 129 and onward) to a reasonable value for the period of the
	// PWM (T) signal for now, and experiment by changing this value later. Note,
	// the ranges of PWM that the Pololu motor driver can accept is up to 20 kHz
	TCCR0B |= (_BV(CS01) | _BV(CS00));
 724:	85 b5       	in	r24, 0x25	; 37
 726:	83 60       	ori	r24, 0x03	; 3
 728:	85 bd       	out	0x25, r24	; 37
	
	// Set the duty cycle to  %
	OCR0A  = 0x10;
 72a:	80 e1       	ldi	r24, 0x10	; 16
 72c:	87 bd       	out	0x27, r24	; 39
 72e:	08 95       	ret

00000730 <malloc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	10 f4       	brcc	.+4      	; 0x742 <malloc+0x12>
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__flp>
 746:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__flp+0x1>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	a0 e0       	ldi	r26, 0x00	; 0
 750:	b0 e0       	ldi	r27, 0x00	; 0
 752:	30 97       	sbiw	r30, 0x00	; 0
 754:	19 f1       	breq	.+70     	; 0x79c <malloc+0x6c>
 756:	40 81       	ld	r20, Z
 758:	51 81       	ldd	r21, Z+1	; 0x01
 75a:	02 81       	ldd	r16, Z+2	; 0x02
 75c:	13 81       	ldd	r17, Z+3	; 0x03
 75e:	48 17       	cp	r20, r24
 760:	59 07       	cpc	r21, r25
 762:	c8 f0       	brcs	.+50     	; 0x796 <malloc+0x66>
 764:	84 17       	cp	r24, r20
 766:	95 07       	cpc	r25, r21
 768:	69 f4       	brne	.+26     	; 0x784 <malloc+0x54>
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	31 f0       	breq	.+12     	; 0x77a <malloc+0x4a>
 76e:	12 96       	adiw	r26, 0x02	; 2
 770:	0c 93       	st	X, r16
 772:	12 97       	sbiw	r26, 0x02	; 2
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	1c 93       	st	X, r17
 778:	27 c0       	rjmp	.+78     	; 0x7c8 <malloc+0x98>
 77a:	00 93 1b 02 	sts	0x021B, r16	; 0x80021b <__flp>
 77e:	10 93 1c 02 	sts	0x021C, r17	; 0x80021c <__flp+0x1>
 782:	22 c0       	rjmp	.+68     	; 0x7c8 <malloc+0x98>
 784:	21 15       	cp	r18, r1
 786:	31 05       	cpc	r19, r1
 788:	19 f0       	breq	.+6      	; 0x790 <malloc+0x60>
 78a:	42 17       	cp	r20, r18
 78c:	53 07       	cpc	r21, r19
 78e:	18 f4       	brcc	.+6      	; 0x796 <malloc+0x66>
 790:	9a 01       	movw	r18, r20
 792:	bd 01       	movw	r22, r26
 794:	ef 01       	movw	r28, r30
 796:	df 01       	movw	r26, r30
 798:	f8 01       	movw	r30, r16
 79a:	db cf       	rjmp	.-74     	; 0x752 <malloc+0x22>
 79c:	21 15       	cp	r18, r1
 79e:	31 05       	cpc	r19, r1
 7a0:	f9 f0       	breq	.+62     	; 0x7e0 <malloc+0xb0>
 7a2:	28 1b       	sub	r18, r24
 7a4:	39 0b       	sbc	r19, r25
 7a6:	24 30       	cpi	r18, 0x04	; 4
 7a8:	31 05       	cpc	r19, r1
 7aa:	80 f4       	brcc	.+32     	; 0x7cc <malloc+0x9c>
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	9b 81       	ldd	r25, Y+3	; 0x03
 7b0:	61 15       	cp	r22, r1
 7b2:	71 05       	cpc	r23, r1
 7b4:	21 f0       	breq	.+8      	; 0x7be <malloc+0x8e>
 7b6:	fb 01       	movw	r30, r22
 7b8:	93 83       	std	Z+3, r25	; 0x03
 7ba:	82 83       	std	Z+2, r24	; 0x02
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <malloc+0x96>
 7be:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__flp+0x1>
 7c2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <__flp>
 7c6:	fe 01       	movw	r30, r28
 7c8:	32 96       	adiw	r30, 0x02	; 2
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <malloc+0x124>
 7cc:	fe 01       	movw	r30, r28
 7ce:	e2 0f       	add	r30, r18
 7d0:	f3 1f       	adc	r31, r19
 7d2:	81 93       	st	Z+, r24
 7d4:	91 93       	st	Z+, r25
 7d6:	22 50       	subi	r18, 0x02	; 2
 7d8:	31 09       	sbc	r19, r1
 7da:	39 83       	std	Y+1, r19	; 0x01
 7dc:	28 83       	st	Y, r18
 7de:	3a c0       	rjmp	.+116    	; 0x854 <malloc+0x124>
 7e0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
 7e4:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
 7e8:	23 2b       	or	r18, r19
 7ea:	41 f4       	brne	.+16     	; 0x7fc <malloc+0xcc>
 7ec:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 7f0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 7f4:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <__brkval+0x1>
 7f8:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <__brkval>
 7fc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 800:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 804:	21 15       	cp	r18, r1
 806:	31 05       	cpc	r19, r1
 808:	41 f4       	brne	.+16     	; 0x81a <malloc+0xea>
 80a:	2d b7       	in	r18, 0x3d	; 61
 80c:	3e b7       	in	r19, 0x3e	; 62
 80e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 812:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 816:	24 1b       	sub	r18, r20
 818:	35 0b       	sbc	r19, r21
 81a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <__brkval>
 81e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <__brkval+0x1>
 822:	e2 17       	cp	r30, r18
 824:	f3 07       	cpc	r31, r19
 826:	a0 f4       	brcc	.+40     	; 0x850 <malloc+0x120>
 828:	2e 1b       	sub	r18, r30
 82a:	3f 0b       	sbc	r19, r31
 82c:	28 17       	cp	r18, r24
 82e:	39 07       	cpc	r19, r25
 830:	78 f0       	brcs	.+30     	; 0x850 <malloc+0x120>
 832:	ac 01       	movw	r20, r24
 834:	4e 5f       	subi	r20, 0xFE	; 254
 836:	5f 4f       	sbci	r21, 0xFF	; 255
 838:	24 17       	cp	r18, r20
 83a:	35 07       	cpc	r19, r21
 83c:	48 f0       	brcs	.+18     	; 0x850 <malloc+0x120>
 83e:	4e 0f       	add	r20, r30
 840:	5f 1f       	adc	r21, r31
 842:	50 93 1a 02 	sts	0x021A, r21	; 0x80021a <__brkval+0x1>
 846:	40 93 19 02 	sts	0x0219, r20	; 0x800219 <__brkval>
 84a:	81 93       	st	Z+, r24
 84c:	91 93       	st	Z+, r25
 84e:	02 c0       	rjmp	.+4      	; 0x854 <malloc+0x124>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	cf 01       	movw	r24, r30
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	08 95       	ret

00000860 <free>:
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <free+0xa>
 868:	81 c0       	rjmp	.+258    	; 0x96c <free+0x10c>
 86a:	fc 01       	movw	r30, r24
 86c:	32 97       	sbiw	r30, 0x02	; 2
 86e:	13 82       	std	Z+3, r1	; 0x03
 870:	12 82       	std	Z+2, r1	; 0x02
 872:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <__flp>
 876:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <__flp+0x1>
 87a:	10 97       	sbiw	r26, 0x00	; 0
 87c:	81 f4       	brne	.+32     	; 0x89e <free+0x3e>
 87e:	20 81       	ld	r18, Z
 880:	31 81       	ldd	r19, Z+1	; 0x01
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
 88a:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	51 f5       	brne	.+84     	; 0x8e8 <free+0x88>
 894:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <__brkval+0x1>
 898:	e0 93 19 02 	sts	0x0219, r30	; 0x800219 <__brkval>
 89c:	67 c0       	rjmp	.+206    	; 0x96c <free+0x10c>
 89e:	ed 01       	movw	r28, r26
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	ce 17       	cp	r28, r30
 8a6:	df 07       	cpc	r29, r31
 8a8:	40 f4       	brcc	.+16     	; 0x8ba <free+0x5a>
 8aa:	4a 81       	ldd	r20, Y+2	; 0x02
 8ac:	5b 81       	ldd	r21, Y+3	; 0x03
 8ae:	9e 01       	movw	r18, r28
 8b0:	41 15       	cp	r20, r1
 8b2:	51 05       	cpc	r21, r1
 8b4:	f1 f0       	breq	.+60     	; 0x8f2 <free+0x92>
 8b6:	ea 01       	movw	r28, r20
 8b8:	f5 cf       	rjmp	.-22     	; 0x8a4 <free+0x44>
 8ba:	d3 83       	std	Z+3, r29	; 0x03
 8bc:	c2 83       	std	Z+2, r28	; 0x02
 8be:	40 81       	ld	r20, Z
 8c0:	51 81       	ldd	r21, Z+1	; 0x01
 8c2:	84 0f       	add	r24, r20
 8c4:	95 1f       	adc	r25, r21
 8c6:	c8 17       	cp	r28, r24
 8c8:	d9 07       	cpc	r29, r25
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <free+0x82>
 8cc:	88 81       	ld	r24, Y
 8ce:	99 81       	ldd	r25, Y+1	; 0x01
 8d0:	84 0f       	add	r24, r20
 8d2:	95 1f       	adc	r25, r21
 8d4:	02 96       	adiw	r24, 0x02	; 2
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	80 83       	st	Z, r24
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	9b 81       	ldd	r25, Y+3	; 0x03
 8de:	93 83       	std	Z+3, r25	; 0x03
 8e0:	82 83       	std	Z+2, r24	; 0x02
 8e2:	21 15       	cp	r18, r1
 8e4:	31 05       	cpc	r19, r1
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <free+0x92>
 8e8:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__flp+0x1>
 8ec:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__flp>
 8f0:	3d c0       	rjmp	.+122    	; 0x96c <free+0x10c>
 8f2:	e9 01       	movw	r28, r18
 8f4:	fb 83       	std	Y+3, r31	; 0x03
 8f6:	ea 83       	std	Y+2, r30	; 0x02
 8f8:	49 91       	ld	r20, Y+
 8fa:	59 91       	ld	r21, Y+
 8fc:	c4 0f       	add	r28, r20
 8fe:	d5 1f       	adc	r29, r21
 900:	ec 17       	cp	r30, r28
 902:	fd 07       	cpc	r31, r29
 904:	61 f4       	brne	.+24     	; 0x91e <free+0xbe>
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	84 0f       	add	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	02 96       	adiw	r24, 0x02	; 2
 910:	e9 01       	movw	r28, r18
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	88 83       	st	Y, r24
 916:	82 81       	ldd	r24, Z+2	; 0x02
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	9b 83       	std	Y+3, r25	; 0x03
 91c:	8a 83       	std	Y+2, r24	; 0x02
 91e:	e0 e0       	ldi	r30, 0x00	; 0
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	12 96       	adiw	r26, 0x02	; 2
 924:	8d 91       	ld	r24, X+
 926:	9c 91       	ld	r25, X
 928:	13 97       	sbiw	r26, 0x03	; 3
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	19 f0       	breq	.+6      	; 0x934 <free+0xd4>
 92e:	fd 01       	movw	r30, r26
 930:	dc 01       	movw	r26, r24
 932:	f7 cf       	rjmp	.-18     	; 0x922 <free+0xc2>
 934:	8d 91       	ld	r24, X+
 936:	9c 91       	ld	r25, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	9d 01       	movw	r18, r26
 93c:	2e 5f       	subi	r18, 0xFE	; 254
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	82 0f       	add	r24, r18
 942:	93 1f       	adc	r25, r19
 944:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
 948:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	69 f4       	brne	.+26     	; 0x96c <free+0x10c>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	29 f4       	brne	.+10     	; 0x960 <free+0x100>
 956:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp+0x1>
 95a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp>
 95e:	02 c0       	rjmp	.+4      	; 0x964 <free+0x104>
 960:	13 82       	std	Z+3, r1	; 0x03
 962:	12 82       	std	Z+2, r1	; 0x02
 964:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <__brkval+0x1>
 968:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <__brkval>
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	08 95       	ret

00000972 <abort>:
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	f8 94       	cli
 978:	00 c0       	rjmp	.+0      	; 0x97a <_exit>

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
